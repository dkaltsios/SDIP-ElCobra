"use strict";
/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2025 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the Sonar Source-Available License Version 1, as published by SonarSource SA.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the Sonar Source-Available License for more details.
 *
 * You should have received a copy of the Sonar Source-Available License
 * along with this program; if not, see https://sonarsource.com/license/ssal/
 */
// https://sonarsource.github.io/rspec/#/rspec/S2004/javascript
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const index_js_1 = require("../helpers/index.js");
const meta_js_1 = require("./meta.js");
const DEFAULT_THRESHOLD = 4;
exports.rule = {
    meta: (0, index_js_1.generateMeta)(meta_js_1.meta, { schema: meta_js_1.schema }, true),
    create(context) {
        const max = context.options[0]?.threshold ?? DEFAULT_THRESHOLD;
        const nestedStack = [];
        return {
            ':function'(node) {
                const fn = node;
                nestedStack.push(fn);
                if (nestedStack.length === max + 1) {
                    const secondaries = nestedStack.slice(0, -1);
                    (0, index_js_1.report)(context, {
                        loc: (0, index_js_1.getMainFunctionTokenLocation)(fn, fn.parent, context),
                        message: `Refactor this code to not nest functions more than ${max} levels deep.`,
                    }, secondaries.map(n => (0, index_js_1.toSecondaryLocation)({
                        loc: (0, index_js_1.getMainFunctionTokenLocation)(n, n.parent, context),
                    }, 'Nesting +1')));
                }
            },
            ':function:exit'() {
                nestedStack.pop();
            },
        };
    },
};
