"use strict";
/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2025 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the Sonar Source-Available License Version 1, as published by SonarSource SA.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the Sonar Source-Available License for more details.
 *
 * You should have received a copy of the Sonar Source-Available License
 * along with this program; if not, see https://sonarsource.com/license/ssal/
 */
// https://sonarsource.github.io/rspec/#/rspec/S5757/javascript
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const index_js_1 = require("../helpers/index.js");
const meta_js_1 = require("./meta.js");
const MESSAGE = 'Make sure confidential information is not logged here.';
exports.rule = {
    meta: (0, index_js_1.generateMeta)(meta_js_1.meta, undefined, true),
    create(context) {
        return {
            NewExpression: (node) => {
                const newExpression = node;
                const { callee } = newExpression;
                if ((0, index_js_1.getFullyQualifiedName)(context, callee) !== 'signale.Signale') {
                    return;
                }
                if (newExpression.arguments.length === 0) {
                    (0, index_js_1.report)(context, { node: callee, message: MESSAGE });
                    return;
                }
                const firstArgument = (0, index_js_1.getValueOfExpression)(context, newExpression.arguments[0], 'ObjectExpression');
                if (!firstArgument) {
                    // Argument exists but its value is unknown
                    return;
                }
                const secrets = (0, index_js_1.getProperty)(firstArgument, 'secrets', context);
                if (secrets &&
                    secrets.value.type === 'ArrayExpression' &&
                    secrets.value.elements.length === 0) {
                    (0, index_js_1.report)(context, {
                        node: callee,
                        message: MESSAGE,
                    }, [(0, index_js_1.toSecondaryLocation)(secrets)]);
                }
                else if (!secrets) {
                    (0, index_js_1.report)(context, {
                        node: callee,
                        message: MESSAGE,
                    }, [(0, index_js_1.toSecondaryLocation)(firstArgument)]);
                }
            },
        };
    },
};
