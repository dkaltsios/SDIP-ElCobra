"use strict";
/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2025 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the Sonar Source-Available License Version 1, as published by SonarSource SA.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the Sonar Source-Available License for more details.
 *
 * You should have received a copy of the Sonar Source-Available License
 * along with this program; if not, see https://sonarsource.com/license/ssal/
 */
// https://sonarsource.github.io/rspec/#/rspec/S2737
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const index_js_1 = require("../helpers/index.js");
const meta_js_1 = require("./meta.js");
exports.rule = {
    meta: (0, index_js_1.generateMeta)(meta_js_1.meta, {
        messages: {
            uselessCatch: 'Add logic to this catch clause or eliminate it and rethrow the exception automatically.',
        },
    }),
    create(context) {
        return {
            CatchClause: (node) => visitCatchClause(node, context),
        };
    },
};
function visitCatchClause(catchClause, context) {
    const statements = catchClause.body.body;
    if (catchClause.param &&
        statements.length === 1 &&
        onlyRethrows(statements[0], catchClause.param, context.sourceCode)) {
        const catchKeyword = context.sourceCode.getFirstToken(catchClause);
        context.report({
            messageId: 'uselessCatch',
            loc: catchKeyword.loc,
        });
    }
}
function onlyRethrows(statement, catchParam, sourceCode) {
    return ((0, index_js_1.isThrowStatement)(statement) &&
        catchParam !== null &&
        statement.argument !== null &&
        (0, index_js_1.areEquivalent)(catchParam, statement.argument, sourceCode));
}
