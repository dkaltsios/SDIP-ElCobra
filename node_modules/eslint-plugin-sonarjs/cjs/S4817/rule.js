"use strict";
/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2025 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the Sonar Source-Available License Version 1, as published by SonarSource SA.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the Sonar Source-Available License for more details.
 *
 * You should have received a copy of the Sonar Source-Available License
 * along with this program; if not, see https://sonarsource.com/license/ssal/
 */
// https://sonarsource.github.io/rspec/#/rspec/S4817/javascript
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const index_js_1 = require("../helpers/index.js");
const meta_js_1 = require("./meta.js");
const xpathModule = 'xpath';
const xpathEvalMethods = ['select', 'select1', 'evaluate'];
const ieEvalMethods = ['selectNodes', 'SelectSingleNode'];
exports.rule = {
    meta: (0, index_js_1.generateMeta)(meta_js_1.meta, {
        messages: {
            checkXPath: 'Make sure that executing this XPATH expression is safe.',
        },
    }),
    create(context) {
        return {
            MemberExpression: (node) => {
                if ((0, index_js_1.isMemberExpression)(node, 'document', 'evaluate')) {
                    context.report({ messageId: 'checkXPath', node });
                }
            },
            CallExpression: (node) => checkCallExpression(node, context),
        };
    },
};
function checkCallExpression({ callee, arguments: args }, context) {
    if (args.length > 0 && (0, index_js_1.isLiteral)(args[0])) {
        return;
    }
    // IE
    if ((0, index_js_1.isMemberWithProperty)(callee, ...ieEvalMethods) && args.length === 1) {
        context.report({ messageId: 'checkXPath', node: callee });
        return;
    }
    // Document.evaluate
    if ((0, index_js_1.isMemberWithProperty)(callee, 'evaluate') &&
        !(0, index_js_1.isMemberExpression)(callee, 'document', 'evaluate') &&
        args.length >= 4) {
        const resultTypeArgument = args[3];
        const argumentAsText = context.sourceCode.getText(resultTypeArgument);
        if (argumentAsText.includes('XPathResult')) {
            context.report({ messageId: 'checkXPath', node: callee });
            return;
        }
    }
    // "xpath" module
    const fqn = (0, index_js_1.getFullyQualifiedName)(context, callee);
    if (xpathEvalMethods.some(method => fqn === `${xpathModule}.${method}`)) {
        context.report({ messageId: 'checkXPath', node: callee });
    }
}
